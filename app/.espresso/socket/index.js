// Generated by CoffeeScript 1.6.3
var sId;

sId = void 0;

exports.configure = function(io) {
  return io.on("connection", function(socket) {
    var fs, logEvent, logFileName, moment, saveToFile, socketUser;
    console.log("New socket connected!");
    fs = require('fs');
    moment = require('moment');
    socketUser = void 0;
    logFileName = void 0;
    logEvent = function(user, event) {
      var msg, timeStamp;
      if (logFileName !== void 0 && socketUser !== void 0) {
        timeStamp = moment().format("YYYYMMDD,HHmmss");
        msg = "\n" + timeStamp + "," + socketUser + "," + event;
        return fs.appendFile(logFileName, msg, function(err) {
          if (err) {
            return console.log(err);
          }
        });
      }
    };
    saveToFile = function(data) {
      var filename;
      filename = "./data/cm.json";
      return fs.writeFile(filename, JSON.stringify(data), function(err) {
        if (err) {
          console.log(err);
        }
        return console.log('saved to server:' + filename);
      });
    };
    socket.on("sessionId", function(data) {
      console.log("sId:" + sId);
      if (sId === void 0) {
        sId = data;
        socket.emit("sessionId", sId);
      } else {
        socket.emit("sessionId", sId);
      }
      return console.log("sId:" + sId);
    });
    socket.on("login", function(data) {
      io.sockets.emit("login", data.user);
      socketUser = data.user;
      logFileName = "./log/" + socketUser + ".txt";
      return logEvent(socketUser, "logged in");
    });
    socket.on("saveConcept", function(data) {
      console.log("response to saveConcept call!");
      return saveToFile(JSON.parse(data));
    });
    socket.on("loadConcept", function() {
      var filename;
      filename = "./data/cm.json";
      return fs.readFile(filename, 'utf8', function(err, data) {
        if (err) {
          console.log('Error: ' + err);
        }
        data = JSON.parse(data);
        console.log('got file ' + filename);
        return io.sockets.emit("sendConcept", data);
      });
    });
    socket.on("createConcept", function(concept) {
      socket.broadcast.emit("createConcept", JSON.parse(concept));
      return logEvent(socketUser, "create concept " + JSON.parse(concept).id);
    });
    socket.on("deleteConcept", function(id) {
      socket.broadcast.emit("deleteConcept", id);
      return logEvent(socketUser, "delete concept " + id);
    });
    socket.on("deleteAll", function() {
      socket.broadcast.emit("deleteAll");
      return logEvent(socketUser, "delete all");
    });
    socket.on("deleteRelation", function(data) {
      data = JSON.parse(data);
      socket.broadcast.emit("deleteRelation", data);
      return logEvent(socketUser, "delete relation b/w " + data.source + " and " + data.target);
    });
    socket.on("startMoveConcept", function(id) {
      return socket.broadcast.emit("lockConcept", id);
    });
    socket.on("dragConcept", function(data) {
      return socket.broadcast.emit("moveConcept", JSON.parse(data));
    });
    socket.on("stoptMoveConcept", function(data) {
      return socket.broadcast.emit("moveConcept", JSON.parse(data));
    });
    socket.on("createRelation", function(data) {
      return socket.broadcast.emit("createRelation", JSON.parse(data));
    });
    socket.on("updateConceptContent", function(data) {
      return socket.broadcast.emit("updateConceptContent", JSON.parse(data));
    });
    socket.on("updateRelationLabel", function(data) {
      return socket.broadcast.emit("updateRelationLabel", JSON.parse(data));
    });
    return socket.on("disconnect", function(data) {
      return console.log("user disconnected");
    });
  });
};
